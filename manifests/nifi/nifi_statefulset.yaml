apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: default
  name: nifi
  labels:
    app: nifi
    release: nifi
spec:
  podManagementPolicy: Parallel
  serviceName: nifi-headless
  replicas: 1
  selector:
    matchLabels:
      app: nifi
      release: nifi
  template:
    metadata:
      annotations: {}
      labels:
        app: nifi
        release: nifi
    spec:
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - "nifi"
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
      - name: server
        imagePullPolicy: "IfNotPresent"
        image: "apache/nifi:1.23.2"
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
            echo "updating ${1} in ${target_file}"
            if egrep "^${1}=" ${target_file} &> /dev/null; then
              sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
            else
              echo ${1}=${2} >> ${target_file}
            fi
          }
          mkdir -p ${NIFI_HOME}/config-data/conf
          FQDN=$(hostname -f)

          cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
          bin/nifi.sh set-single-user-credentials username changemechangeme


          if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
            gzip /opt/nifi/data/flow.xml
          fi


          prop_replace nifi.ui.banner.text $(hostname -s)
          prop_replace nifi.remote.input.host ${FQDN}
          prop_replace nifi.cluster.node.address ${FQDN}
          prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}
          prop_replace nifi.web.http.host ${FQDN}
          # prop_replace nifi.web.proxy.host nifi.cb-static.svc,nifi.shocadmin.com

          if [ ! -r "${NIFI_HOME}/conf/nifi-cert.pem" ]
          then
            /opt/nifi/nifi-toolkit-current/bin/tls-toolkit.sh standalone \
              -n 'nifi-nifi-0.nifi-nifi-headless.cb-static.svc.cluster.local' \
              -C 'CN=admin, OU=NIFI' \
              -o "${NIFI_HOME}/conf/" \
              -P changeMe \
              -S changeMe \
              --nifiPropertiesFile /opt/nifi/nifi-current/conf/nifi.properties
          fi
          prop_replace nifi.web.http.network.interface.default "eth0" nifi.properties
          prop_replace nifi.web.http.network.interface.lo "lo" nifi.properties
          prop_replace nifi.web.proxy.context.path "/cb-nifi, /cb-nifi/nifi, /nifi-processor" nifi.properties

          for f in "${NIFI_HOME}/conf/authorizers.xml" "${NIFI_HOME}/conf/login-identity-providers.xml" ${NIFI_HOME}/conf/nifi.properties
          do
            echo === $f ===
            cat $f
          done
          echo === end of files ===

          function prop () {
            target_file=${NIFI_HOME}/conf/nifi.properties
            egrep "^${1}=" ${target_file} | cut -d'=' -f2
          }

          function offloadNode() {
              FQDN=$(hostname -f)
              echo "disconnecting node '$FQDN'"
              baseUrl=https://${FQDN}:8443

              echo "keystoreType=$(prop nifi.security.keystoreType)" > secure.properties
              echo "keystore=$(prop nifi.security.keystore)" >> secure.properties
              echo "keystorePasswd=$(prop nifi.security.keystorePasswd)" >> secure.properties
              echo "truststoreType=$(prop nifi.security.truststoreType)" >> secure.properties
              echo "truststore=$(prop nifi.security.truststore)" >> secure.properties
              echo "truststorePasswd=$(prop nifi.security.truststorePasswd)" >> secure.properties
              echo "proxiedEntity=CN=admin, OU=NIFI" >> secure.properties
             
              secureArgs="-p secure.properties"

              echo baseUrl ${baseUrl}
              echo "gracefully disconnecting node '$FQDN' from cluster"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
              nnid=$(jq --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .nodeId' nodes.json)
              echo "disconnecting node ${nnid}"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi disconnect-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "get a connected node"
              connectedNode=$(jq -r 'first(.cluster.nodes|=sort_by(.address)| .cluster.nodes[] | select(.status=="CONNECTED")) | .address' nodes.json)
              baseUrl=https://${connectedNode}:8443
              echo baseUrl ${baseUrl}
              echo ""
              echo "wait until node has state 'DISCONNECTED'"
              while [[ "${node_state}" != "DISCONNECTED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
              echo ""
              echo "node '${nnid}' was disconnected"
              echo "offloading node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi offload-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "wait until node has state 'OFFLOADED'"
              while [[ "${node_state}" != "OFFLOADED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
          }

          deleteNode() {
              echo "deleting node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi delete-node -nnid ${nnid} -u ${baseUrl} ${secureArgs}
              echo "node deleted"
          }

          executeTrap() {
             echo Received trapped signal, beginning shutdown...;
             ./bin/nifi.sh stop;
             exit 0;
          }

          trap executeTrap TERM HUP INT;
          trap ":" EXIT

          exec bin/nifi.sh run & nifi_pid="$!"
          echo NiFi running with PID ${nifi_pid}.
          wait ${nifi_pid}

        resources:
          limits:
            cpu: 1000m
            memory: 4Gi
          requests:
            cpu: 400m
            memory: 128Mi
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 6007
          name: cluster
          protocol: TCP
        - containerPort: 7001
          name: processor01
          protocol: TCP
        - containerPort: 7002
          name: processor02
          protocol: TCP
        env:
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: "nifi.shocadmin.com"
        - name: NIFI_WEB_HTTPS_HOST
          value: 0.0.0.0
        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 60
          tcpSocket:
            port: 8443
        volumeMounts:
          - mountPath: /opt/nifi/nifi-current/logs
            name: data
            subPath: logs
          - mountPath: /opt/nifi/data
            name: data
            subPath: data
          - mountPath: /opt/nifi/nifi-current/auth-conf/
            name: data
            subPath: auth-conf
          - mountPath: /opt/nifi/nifi-current/config-data
            name: data
            subPath: config-data
          - mountPath: /opt/nifi/flowfile_repository
            name: data
            subPath: flowfile-repository
          - mountPath: /opt/nifi/content_repository
            name: data
            subPath: content-repository
          - mountPath: /opt/nifi/provenance_repository
            name: data
            subPath: provenance-repository
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-ldap-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-ldap.xml
            subPath: "login-identity-providers-ldap.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "flow-content"
            mountPath: /opt/nifi/data/flow.xml
            subPath: "flow.xml"
      # - name: app-log
      #   imagePullPolicy: "IfNotPresent"
      #   image: "busybox:1.32.0"
      #   args: 
      #     - /bin/sh
      #     - -c
      #     - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-app.log & wait $!
      #   resources:
      #     limits:
      #       cpu: 50m
      #       memory: 50Mi
      #     requests:
      #       cpu: 10m
      #       memory: 10Mi
      #   volumeMounts:
      #   - mountPath: /var/log
      #     name: data
      #     subPath: logs
      # - name: bootstrap-log
      #   imagePullPolicy: "IfNotPresent"
      #   image: "busybox:1.32.0"
      #   args:
      #     - /bin/sh
      #     - -c
      #     - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-bootstrap.log & wait $!
      #   resources:
      #     limits:
      #       cpu: 50m
      #       memory: 50Mi
      #     requests:
      #       cpu: 10m
      #       memory: 10Mi
      #   volumeMounts:
      #   - mountPath: /var/log
      #     name: data
      #     subPath: logs
      # - name: user-log
        # imagePullPolicy: "IfNotPresent"
        # image: "busybox:1.32.0"
        # args:
        #   - /bin/sh
        #   - -c
        #   - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-user.log & wait $!
        # resources:
        #   limits:
        #     cpu: 50m
        #     memory: 50Mi
        #   requests:
        #     cpu: 10m
        #     memory: 10Mi
        # volumeMounts:
        # - mountPath: /var/log
        #   name: data
        #   subPath: logs
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: nifi-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: nifi-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-ldap-xml"
        configMap:
          name: nifi-config
          items:
            - key: "login-identity-providers-ldap.xml"
              path: "login-identity-providers-ldap.xml"
      - name: "state-management-xml"
        configMap:
          name: nifi-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: nifi-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "flow-content"
        configMap:
          name: nifi-config
          items:
            - key: "flow.xml"
              path: "flow.xml"
      - name: data
        persistentVolumeClaim:
          claimName: nifi-pvc 
  # volumeClaimTemplates:
  #   - metadata:
  #       name: data
  #     spec:
  #       storageClassName: manual
  #       accessModes:
  #         - "ReadWriteOnce"
  #       resources:
  #         requests:
  #           storage: 8Gi

